package lollipop;

import ecs100.UI; //UI functions for ECS students
import java.awt.Color; //Allows manipulation of colours

public class lollipop {
	/**This class draws a lollipop on the screen, according to specified parameters.
	 * It includes four variations of the drawLollipop() method, allowing the programmer more freedom when calling this method.
	 * At first glance, this may seem more complex than necessary. However, this allows for greater simplicity in the test programs.
	 */
	
	public void drawLollipop (double x, double y, double size, double stickHeight, Color customColor) {
		/** This is the primary drawLollipop method.
		 * It draws a lollipop on the screen, consisting of a circle of a specified colour and a base "stick".
		 * @param x				The horizontal position of the centre of the circle.
		 * @param y				The vertical position of the centre of the circle.
		 * @param size			The size of the circle.
		 * @param stickHeight	The height of the stick, beginning from the centre of the circle.
		 * @param customColor	A color object, representing the colour of the circle.
		 */
			//Calculate the lollipop's dimensions.
			double halfSize = size / 2; //Required to calculate the dimensions.
			double left = x - halfSize; //The position of the left hand side of the circle is the circle's centre less half the size.
			double top = y - halfSize; //The top position is calculated similarly.
			double bottom = y + stickHeight; //The position of the bottom of the stick.
			
			//Draw the stick.
			UI.setColor(Color.black);
			UI.setLineWidth(size / 8); //The width of the stick line is scaled to a reasonable factor.
			UI.drawLine(x, y, x, bottom); //This draws the stick line.
			
			//Draw the circle.
			UI.setColor(customColor); //Set the circle's color to the specified colour.
			UI.fillOval(left, top, size, size); //A circle is drawn, overwriting the top part of the line.			
	}
	
	public void drawLollipop (double x, double y, double size, double stickHeight, float r, float g, float b) {
		/** This version of the method allows the programmer to specify the rgb values of a colour, rather than pass a Color object.*/
		Color customColor = new Color(r, g, b); //Create a color object with the specified rgb values.
		drawLollipop(x, y, size, stickHeight, customColor); //Calls the above method.
	}
	
	public void drawLollipop (double x, double y, double size, double stickHeight, double r, double g, double b) {
		/** Double types are generated by Math.random(), but the Color constructor requires floats. It is therefore necessary to provide 
		 * this method to convert the rgb values from doubles to floats.*/
		drawLollipop(x, y, size, stickHeight, (float)r, (float)g, (float)b); //Calls the above method.
	}

	public void drawLollipop (double x, double y, double size, double stickHeight) {
		/** If no colour is specified in the method call, a red lollipop is drawn by default.*/
		drawLollipop(x, y, size, stickHeight, Color.red);
	}
	
	public void askForSpecs() {
		/** Although not part of the assignment, this method was a part of the exercise in class.
		 * It prompts the user for the parameters of a lollipop.*/
		double x = UI.askDouble("Enter a value for x: ");
		double y = UI.askDouble("Enter a value for y: ");
		double size = UI.askDouble("Enter the diameter: ");
		double stick = UI.askDouble("Enter the stick height: ");

		drawLollipop(x, y, size, stick); //Draws a lollipop according to the user's specs.
	}
}
